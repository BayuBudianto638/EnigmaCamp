// <auto-generated />
using DataTypes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataTypes.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20221117002438_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CourseStudentClass", b =>
                {
                    b.Property<int>("CoursesCourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentClassesStudentClassId")
                        .HasColumnType("int");

                    b.HasKey("CoursesCourseId", "StudentClassesStudentClassId");

                    b.HasIndex("StudentClassesStudentClassId");

                    b.ToTable("CourseStudentClass", "dbo");
                });

            modelBuilder.Entity("DataTypes.Model.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("Nvarchar(100)");

                    b.Property<int>("StudentCourseId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("StudentCourseId");

                    b.ToTable("Courses", "dbo");
                });

            modelBuilder.Entity("DataTypes.Model.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("NVarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Nvarchar(100)");

                    b.Property<int>("StudentCourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("StudentCourseId");

                    b.ToTable("Students", "dbo");
                });

            modelBuilder.Entity("DataTypes.Models.StudentAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("AddressDescription")
                        .IsRequired()
                        .HasColumnType("NVarchar(MAX)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentAddress", "dbo");
                });

            modelBuilder.Entity("DataTypes.Models.StudentClass", b =>
                {
                    b.Property<int>("StudentClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentClassId"), 1L, 1);

                    b.Property<string>("StudentClassDescription")
                        .IsRequired()
                        .HasColumnType("NVarchar(MAX)");

                    b.HasKey("StudentClassId");

                    b.ToTable("StudentClass", "dbo");
                });

            modelBuilder.Entity("DataTypes.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentCourseId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("StudentCourseCode")
                        .IsRequired()
                        .HasColumnType("NVarchar(20)");

                    b.Property<string>("StudentCourseName")
                        .IsRequired()
                        .HasColumnType("Nvarchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentCourseId");

                    b.ToTable("StudentCourses", "dbo");
                });

            modelBuilder.Entity("StudentStudentClass", b =>
                {
                    b.Property<int>("StudentClassesStudentClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsStudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentClassesStudentClassId", "StudentsStudentId");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("StudentStudentClass", "dbo");
                });

            modelBuilder.Entity("CourseStudentClass", b =>
                {
                    b.HasOne("DataTypes.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTypes.Models.StudentClass", null)
                        .WithMany()
                        .HasForeignKey("StudentClassesStudentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataTypes.Model.Course", b =>
                {
                    b.HasOne("DataTypes.Models.StudentCourse", "StudentCourse")
                        .WithMany("Courses")
                        .HasForeignKey("StudentCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentCourse");
                });

            modelBuilder.Entity("DataTypes.Model.Student", b =>
                {
                    b.HasOne("DataTypes.Models.StudentCourse", "StudentCourse")
                        .WithMany("Students")
                        .HasForeignKey("StudentCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentCourse");
                });

            modelBuilder.Entity("DataTypes.Models.StudentAddress", b =>
                {
                    b.HasOne("DataTypes.Model.Student", "Student")
                        .WithOne("StudentAddress")
                        .HasForeignKey("DataTypes.Models.StudentAddress", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentStudentClass", b =>
                {
                    b.HasOne("DataTypes.Models.StudentClass", null)
                        .WithMany()
                        .HasForeignKey("StudentClassesStudentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataTypes.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataTypes.Model.Student", b =>
                {
                    b.Navigation("StudentAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("DataTypes.Models.StudentCourse", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
